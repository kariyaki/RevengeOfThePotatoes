#pragma once
#include "r66_structs_autogenerated.hpp"

namespace R66::PAL {
    class PlatformAbstractionLayer {
    public:
        virtual ~PlatformAbstractionLayer() {}

        virtual void WebRequest(
            HttpMethod method,
            R66::string_view uri,
            R66::string_view contentType,
            R66::string_view clientId,
            R66::string_view authorization,
            R66::string_view requestBody,
            std::function<void(const WebRequestResult&)> cb,
            std::function<void(const std::exception&)> rej
        ) = 0;
        virtual void Sleep(
            int32_t milliseconds,
            std::function<void()> cb,
            std::function<void(const std::exception&)> rej
        ) = 0;
        virtual void ReadFile(
            R66::string_view path,
            std::function<void(R66::string_view)> cb,
            std::function<void(const std::exception&)> rej
        ) = 0;
        virtual void WriteFile(
            R66::string_view path,
            R66::string_view data,
            std::function<void()> cb,
            std::function<void(const std::exception&)> rej
        ) = 0;
        virtual void Log(
            LogLevel level,
            R66::string_view message,
            std::function<void()> cb,
            std::function<void(const std::exception&)> rej
        ) = 0;
        virtual void CreateWebSocket(
            R66::string_view url,
            R66::string_view protocol,
            std::function<void(int32_t)> cb,
            std::function<void(const std::exception&)> rej
        ) = 0;
        virtual void SendWebSocketMessage(
            int32_t handle,
            R66::string_view message,
            std::function<void()> cb,
            std::function<void(const std::exception&)> rej
        ) = 0;
        virtual void RecvWebSocketMessage(
            int32_t handle,
            int32_t timeoutSeconds,
            std::function<void(R66::string_view)> cb,
            std::function<void(const std::exception&)> rej
        ) = 0;
        virtual void CloseWebSocket(
            int32_t handle,
            std::function<void()> cb,
            std::function<void(const std::exception&)> rej
        ) = 0;
    };

    class ProxyPAL : public PlatformAbstractionLayer {
        void* Parent;
        ProxyPALImpl Impl;
    public:
        ProxyPAL(void* parent, ProxyPALImpl impl);
        void Dispose();

        virtual void WebRequest(
            HttpMethod method,
            R66::string_view uri,
            R66::string_view contentType,
            R66::string_view clientId,
            R66::string_view authorization,
            R66::string_view requestBody,
            std::function<void(const WebRequestResult&)> cb,
            std::function<void(const std::exception&)> rej
        );
        virtual void Sleep(
            int32_t milliseconds,
            std::function<void()> cb,
            std::function<void(const std::exception&)> rej
        );
        virtual void ReadFile(
            R66::string_view path,
            std::function<void(R66::string_view)> cb,
            std::function<void(const std::exception&)> rej
        );
        virtual void WriteFile(
            R66::string_view path,
            R66::string_view data,
            std::function<void()> cb,
            std::function<void(const std::exception&)> rej
        );
        virtual void Log(
            LogLevel level,
            R66::string_view message,
            std::function<void()> cb,
            std::function<void(const std::exception&)> rej
        );
        virtual void CreateWebSocket(
            R66::string_view url,
            R66::string_view protocol,
            std::function<void(int32_t)> cb,
            std::function<void(const std::exception&)> rej
        );
        virtual void SendWebSocketMessage(
            int32_t handle,
            R66::string_view message,
            std::function<void()> cb,
            std::function<void(const std::exception&)> rej
        );
        virtual void RecvWebSocketMessage(
            int32_t handle,
            int32_t timeoutSeconds,
            std::function<void(R66::string_view)> cb,
            std::function<void(const std::exception&)> rej
        );
        virtual void CloseWebSocket(
            int32_t handle,
            std::function<void()> cb,
            std::function<void(const std::exception&)> rej
        );
    };
}
