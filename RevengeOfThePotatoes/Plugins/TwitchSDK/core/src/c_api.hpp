#pragma once
#include <memory>

#include "r66.hpp"
#include "pal.hpp"
#include "marshalling.hpp"

namespace R66::Marshalling {
	typedef void (*TaskCallback)(const R66::Marshalling::Marshallable*, void*);
	class RejectCallback {
		TaskCallback Callback;
		void* Payload;
	public:
		RejectCallback(TaskCallback callback, void* payload) : Callback(callback), Payload(payload) {}
		void operator()(const std::exception& e) const
		{
			auto what = from_utf8(e.what());
			ManagedMarshalException me(what);
			Callback(&me, Payload);
		}
	};
}


#include "r66_export.h"

// C-compatible API surface
extern "C" {
	R66_EXPORT std::shared_ptr<R66::PAL::ProxyPAL>* ProxyPAL_new(void* parent, R66::PAL::ProxyPALImpl impl);
	R66_EXPORT void ProxyPAL_Dispose(std::shared_ptr<R66::PAL::ProxyPAL>* pal);
	R66_EXPORT std::shared_ptr<R66::R66Api>* R66Api_new(std::shared_ptr<R66::PAL::PlatformAbstractionLayer>* pal, const char16_t* clientId, int32_t useEventSubProxy);
	R66_EXPORT void R66Api_Dispose(std::shared_ptr<R66::R66Api>* api);
	R66_EXPORT const char16_t* R66_GetVersion();
#include "c_api_autogenerated.hpp"
}
